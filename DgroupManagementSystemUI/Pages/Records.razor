@page "/records"

<h3>Records</h3>



<table class="modern-table">
    <thead>
        <tr>
            <th @onclick="() => SortTable(nameof(Person.Id))">ID</th>
            <th @onclick="() => SortTable(nameof(Person.FirstName))">First Name</th>
            <th @onclick="() => SortTable(nameof(Person.LastName))">Last Name</th>
            <th @onclick="() => SortTable(nameof(Person.MobileNumber))">Mobile Number</th>
            <th @onclick="() => SortTable(nameof(Person.Email))">Email</th>
            <th @onclick="() => SortTable(nameof(Person.FacebookURL))">Facebook URL</th>
            <th @onclick="() => SortTable(nameof(Person.CivilStatus))">Civil Status</th>
            <th @onclick="() => SortTable(nameof(Person.Age))">Age</th>
            <th @onclick="() => SortTable(nameof(Person.Gender))">Gender</th>
            <th @onclick="() => SortTable(nameof(Person.Notes))">Notes</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var person in sortedPeople)
        {
            <tr>
                <td>@person.Id</td>
                <td>@person.FirstName</td>
                <td>@person.LastName</td>
                <td>@person.MobileNumber</td>
                <td>@person.Email</td>
                <td>@person.FacebookURL</td>
                <td>@person.CivilStatus</td>
                <td>@person.Age</td>
                <td>@person.Gender</td>
                <td>@person.Notes</td>
                <td><button class="modern-button">Edit</button><button class="modern-button">Delete</button></td>
            </tr>
        }
    </tbody>
</table>

<style>
    .modern-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 0px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 16px;
    }

        .modern-table th, .modern-table td {
            padding: 12px 15px;
            text-align: left;
        }

        .modern-table th {
            font-weight: 400;
            color: #333;
            cursor: pointer;
            outline: 2px solid #e0e0e0; /* Outline added to the headers */
            outline-offset: -2px; /* Slightly overlaps the border */
            transition: color 0.3s ease, outline-color 0.3s ease;
        }

            .modern-table th:hover {
                color: #4CAF50;
                outline-color: #4CAF50; /* Changes outline color on hover */
            }

        .modern-table tbody tr {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }

            .modern-table tbody tr:hover {
                transform: translateY(-3px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }

            .modern-table tbody tr td:first-child {
                border-top-left-radius: 10px;
                border-bottom-left-radius: 10px;
            }

            .modern-table tbody tr td:last-child {
                border-top-right-radius: 10px;
                border-bottom-right-radius: 10px;
            }

            .modern-table tbody tr:nth-child(even) {
                background-color: #f9f9f9;
            }




    .modern-button {
        background-color: #4CAF50; /* Primary button color */
        color: white; /* Text color */
        border: none; /* Remove default border */
        border-radius: 2px; /* Rounded corners */
        margin: 1px;
        padding: 5px 5px; /* Spacing inside the button */
        font-size: 10px; /* Text size */
        cursor: pointer; /* Cursor change on hover */
        transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth transitions */
        outline: none; /* Remove default outline */
    }

        .modern-button:hover {
            background-color: #45a049; /* Darker shade on hover */
            transform: scale(1.05); /* Slightly enlarges the button */
        }

        .modern-button:focus {
            box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.5); /* Focus outline */
        }

        .modern-button:active {
            background-color: #388e3c; /* Even darker shade on click */
        }
</style>

@code {
    // create mock data of class Person

    private List<Person> people = new List<Person>
    {
    new Person
    {
        Id = 1,
        FirstName = "John",
        LastName = "Doe",
        MobileNumber = "123-456-7890",
        Email = "john.doe@example.com",
        FacebookURL = "https://facebook.com/johndoe",
        CivilStatus = "Single",
        Notes = "Loves hiking and outdoor activities.",
        Age = 30,
        Gender = "Male"
    },
    new Person
    {
        Id = 2,
        FirstName = "Jane",
        LastName = "Smith",
        MobileNumber = "234-567-8901",
        Email = "jane.smith@example.com",
        FacebookURL = "https://facebook.com/janesmith",
        CivilStatus = "Married",
        Notes = "Enjoys painting and has a small art gallery.",
        Age = 28,
        Gender = "Female"
    },
    new Person
    {
        Id = 3,
        FirstName = "Michael",
        LastName = "Johnson",
        MobileNumber = "345-678-9012",
        Email = "michael.johnson@example.com",
        FacebookURL = "https://facebook.com/michaeljohnson",
        CivilStatus = "Divorced",
        Notes = "Avid reader and part-time writer.",
        Age = 45,
        Gender = "Male"
    },
    new Person
    {
        Id = 4,
        FirstName = "Emily",
        LastName = "Davis",
        MobileNumber = "456-789-0123",
        Email = "emily.davis@example.com",
        FacebookURL = "https://facebook.com/emilydavis",
        CivilStatus = "Single",
        Notes = "Works as a software engineer and loves coding.",
        Age = 34,
        Gender = "Female"
    },
    new Person
    {
        Id = 5,
        FirstName = "Chris",
        LastName = "Brown",
        MobileNumber = "567-890-1234",
        Email = "chris.brown@example.com",
        FacebookURL = "https://facebook.com/chrisbrown",
        CivilStatus = "Widowed",
        Notes = "Has a passion for music and plays the guitar.",
        Age = 50,
        Gender = "Male"
    },
    new Person
    {
        Id = 6,
        FirstName = "Sarah",
        LastName = "Wilson",
        MobileNumber = "678-901-2345",
        Email = "sarah.wilson@example.com",
        FacebookURL = "https://facebook.com/sarahwilson",
        CivilStatus = "Married",
        Notes = "Enjoys gardening and landscape photography.",
        Age = 29,
        Gender = "Female"
    },
    new Person
    {
        Id = 7,
        FirstName = "David",
        LastName = "Martinez",
        MobileNumber = "789-012-3456",
        Email = "david.martinez@example.com",
        FacebookURL = "https://facebook.com/davidmartinez",
        CivilStatus = "Single",
        Notes = "Tech enthusiast and gadget reviewer.",
        Age = 37,
        Gender = "Male"
    },
    new Person
    {
        Id = 8,
        FirstName = "Laura",
        LastName = "Clark",
        MobileNumber = "890-123-4567",
        Email = "laura.clark@example.com",
        FacebookURL = "https://facebook.com/lauraclark",
        CivilStatus = "Married",
        Notes = "Fitness trainer and nutritionist.",
        Age = 31,
        Gender = "Female"
    },
    new Person
    {
        Id = 9,
        FirstName = "James",
        LastName = "Lewis",
        MobileNumber = "901-234-5678",
        Email = "james.lewis@example.com",
        FacebookURL = "https://facebook.com/jameslewis",
        CivilStatus = "Divorced",
        Notes = "Frequent traveler and food blogger.",
        Age = 42,
        Gender = "Male"
    },
    new Person
    {
        Id = 10,
        FirstName = "Olivia",
        LastName = "Walker",
        MobileNumber = "012-345-6789",
        Email = "olivia.walker@example.com",
        FacebookURL = "https://facebook.com/oliviawalker",
        CivilStatus = "Widowed",
        Notes = "Volunteers at local shelters and loves animals.",
        Age = 55,
        Gender = "Female"
    } };

    private List<Person> sortedPeople;
    private bool ascending = true;
    private string currentSortColumn = nameof(Person.Id);

    protected override void OnInitialized()
    {
        sortedPeople = people.OrderBy(p => p.Id).ToList();
    }

    private void SortTable(string columnName)
    {   
        if (currentSortColumn == columnName)
        {
            ascending = !ascending;
        }
        else
        {
            ascending = true;
            currentSortColumn = columnName;
        }

        sortedPeople = ascending
            ? people.OrderBy(p => typeof(Person).GetProperty(columnName).GetValue(p)).ToList()
            : people.OrderByDescending(p => typeof(Person).GetProperty(columnName).GetValue(p)).ToList();
    }

    public class Person
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string MobileNumber { get; set; }
        public string Email { get; set; }
        public string FacebookURL { get; set; }
        public string CivilStatus { get; set; }
        public string Notes { get; set; }
        public int Age { get; set; }
        public string Gender { get; set; }
    }
}